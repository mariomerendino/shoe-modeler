 /*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { meshConfig } from './MeshConfig'

export default function Model({ ...props }) {
  const group = useRef()
  const { nodes, materials } = useGLTF('./all_white_model.glb')
  const [dupedMaterials, updateDupedMaterials] = useState({});
  // This is a hack because all portions of the shoe were using the same material, "Main_"
  // By duplicating the material for each node, we can update colors individually. 
  useEffect(() => {
    let newMaterials = {}
    Object.keys(nodes).forEach((node_key) => {
      newMaterials[node_key] = materials.Main_.clone();
    })

    updateDupedMaterials(newMaterials)
  // eslint-disable-next-line
  }, [])

  const updateSelected = (event, name) =>{
    // Stopping propagation prevents the click to fire all the way through the model
    // IE: Clicking the tongue could end up clicking the sole of the sneaker. 
    event.stopPropagation();

    props.updateCurrentSelection(name);
  };

  return (
    <group ref={group} {...props} dispose={null}>
      {meshConfig.map(properties => (
        <Mesh 
          node={nodes[properties.name]}
          material={dupedMaterials[properties.name]}
          position={properties.position}
          rotation={properties.rotation}
          modifiedColor={props.modifiedColors[properties.name]}
          scale={properties.scale}
          onClick={(event) => updateSelected(event, properties.name)}
          key={properties.name}
        />
      ))}
    </group>
  )
}

const Mesh = ({
  node,
  material,
  position,
  rotation,
  modifiedColor,
  onClick,
  scale,
}) => {
  return(
    <mesh
      scale={scale}
      geometry={node.geometry}
      material={material}
      position={position}
      rotation={rotation}
      material-color={modifiedColor}
      onClick={onClick}
    />
  );
}

useGLTF.preload('/model.glb')
